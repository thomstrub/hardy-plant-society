[{"/Users/Thom/code/hardy-plant-society/src/index.js":"1","/Users/Thom/code/hardy-plant-society/src/serviceWorker.js":"2","/Users/Thom/code/hardy-plant-society/src/pages/App/App.jsx":"3","/Users/Thom/code/hardy-plant-society/src/pages/SignupPage/SignupPage.jsx":"4","/Users/Thom/code/hardy-plant-society/src/pages/LoginPage/LoginPage.jsx":"5","/Users/Thom/code/hardy-plant-society/src/utils/userService.js":"6","/Users/Thom/code/hardy-plant-society/src/hooks/useForm.js":"7","/Users/Thom/code/hardy-plant-society/src/components/ErrorMessage/ErrorMessage.jsx":"8","/Users/Thom/code/hardy-plant-society/src/utils/tokenService.js":"9","/Users/Thom/code/hardy-plant-society/src/components/Forms/SignupForm/SignupForm.jsx":"10","/Users/Thom/code/hardy-plant-society/src/components/Forms/LoginForm/LoginForm.jsx":"11","/Users/Thom/code/hardy-plant-society/src/pages/AdminSignupPage/AdminSignupPage.jsx":"12","/Users/Thom/code/hardy-plant-society/src/components/LoadingMsg/LoadingMsg.jsx":"13","/Users/Thom/code/hardy-plant-society/src/utils/plantPostService.js":"14","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantPostForm.jsx":"15","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantSearchBar.jsx":"16","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantSearchResults.jsx":"17","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantSearchBarV2.jsx":"18","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/RadioComponent.jsx":"19","/Users/Thom/code/hardy-plant-society/src/pages/PlantFeedPage/PlantFeedPage.jsx":"20","/Users/Thom/code/hardy-plant-society/src/components/PlantFeed/PlantFeed.jsx":"21","/Users/Thom/code/hardy-plant-society/src/components/PlantCard/PlantCard.jsx":"22","/Users/Thom/code/hardy-plant-society/src/pages/PlantPostCreatePage/PlantPostCreatePage.jsx":"23","/Users/Thom/code/hardy-plant-society/src/pages/PlantDetailPage/PlantDetailPage.jsx":"24"},{"size":585,"mtime":1610919035047,"results":"25","hashOfConfig":"26"},{"size":5086,"mtime":1610734308620,"results":"27","hashOfConfig":"26"},{"size":2625,"mtime":1611295099025,"results":"28","hashOfConfig":"26"},{"size":2816,"mtime":1611032341156,"results":"29","hashOfConfig":"26"},{"size":1216,"mtime":1611008088032,"results":"30","hashOfConfig":"26"},{"size":1066,"mtime":1610999412746,"results":"31","hashOfConfig":"26"},{"size":312,"mtime":1610734308576,"results":"32","hashOfConfig":"26"},{"size":138,"mtime":1611277467964,"results":"33","hashOfConfig":"26"},{"size":925,"mtime":1611294592048,"results":"34","hashOfConfig":"26"},{"size":3279,"mtime":1611027824541,"results":"35","hashOfConfig":"26"},{"size":1854,"mtime":1611033880866,"results":"36","hashOfConfig":"26"},{"size":296,"mtime":1611026356259,"results":"37","hashOfConfig":"26"},{"size":287,"mtime":1611100192528,"results":"38","hashOfConfig":"26"},{"size":1167,"mtime":1611336420466,"results":"39","hashOfConfig":"26"},{"size":7467,"mtime":1611268151544,"results":"40","hashOfConfig":"26"},{"size":824,"mtime":1611195175760,"results":"41","hashOfConfig":"26"},{"size":373,"mtime":1611281732237,"results":"42","hashOfConfig":"26"},{"size":3055,"mtime":1611209438791,"results":"43","hashOfConfig":"26"},{"size":659,"mtime":1611255868880,"results":"44","hashOfConfig":"26"},{"size":981,"mtime":1611295021156,"results":"45","hashOfConfig":"26"},{"size":515,"mtime":1611271527100,"results":"46","hashOfConfig":"26"},{"size":1174,"mtime":1611292251205,"results":"47","hashOfConfig":"26"},{"size":935,"mtime":1611272607566,"results":"48","hashOfConfig":"26"},{"size":2384,"mtime":1611339040171,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1pjlbbb",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"52"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Thom/code/hardy-plant-society/src/index.js",[],["115","116"],"/Users/Thom/code/hardy-plant-society/src/serviceWorker.js",[],"/Users/Thom/code/hardy-plant-society/src/pages/App/App.jsx",["117"],"import React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport * as plantPostAPI from '../../utils/plantPostService'\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport userService from '../../utils/userService'\nimport AdminSignupPage from '../AdminSignupPage/AdminSignupPage';\nimport PlantPostCreatePage from '../PlantPostCreatePage/PlantPostCreatePage';\nimport PlantFeedPage from '../PlantFeedPage/PlantFeedPage';\nimport PlantDetailPage from '../PlantDetailPage/PlantDetailPage'\n\nfunction App() {\n  // getUser decodes the JWT token into a javascript object\n  // this corresponds to the JWT payload defined in the server\n  // signup or login function-- const token = createJWT(user) -- where user is the document created from mongo\n  const [user, setUser] = useState(userService.getUser())\n\n// get the user from localstorage and decode the token\n  function handleSignUpOrLogin(){\n    setUser(userService.getUser()) \n  }\n\n  function handleLogout(){\n    userService.logout();\n    setUser({user: null});\n  }\n\n  \n  const [loading, setLoading] = useState(false);\n  \n  async function handleAddPost(post){\n      setLoading(true);\n      const data = await plantPostAPI.create(post);\n\n      // to check to make sure this is working\n      console.log(data, ' data')\n      // data is the response from our create function in controllers/posts\n      // update the state\n      setLoading(false);\n      // setPosts([data.post,  ...posts])\n      // to conifrm this check the devtools for your feed component\n      \n  }\n\n\n  return (\n    <div className=\"App\">\n      <Switch>\n          <Route exact path=\"/\">\n              <h1>Home Page</h1>\n          </Route>\n          <Route exact path=\"/plantswap/new\">\n             <PlantPostCreatePage user={user} handleAddPost={handleAddPost} loading={loading}/>\n          </Route>\n          <Route exact path=\"/plantswap/\">\n             <PlantFeedPage user={user} handleLogout={handleLogout}/>\n          </Route>\n          <Route path=\"/plantswap/:id\">\n             <PlantDetailPage user={user} handleLogout={handleLogout}/>\n          </Route>\n          <Route exact path=\"/login\">\n             <LoginPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          <Route exact path=\"/signup\">\n             <SignupPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          <Route exact path=\"/admin\">\n             <AdminSignupPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","/Users/Thom/code/hardy-plant-society/src/pages/SignupPage/SignupPage.jsx",["118"],"import React, { useState } from 'react';\nimport userService from '../../utils/userService';\nimport { useHistory } from 'react-router-dom';\nimport SignupForm from '../../components/Forms/SignupForm/SignupForm'\nimport LoadingMsg from '../../components/LoadingMsg/LoadingMsg'\n\nexport default function SignUpPage(props){\n  const [invalidForm, setValidForm] = useState(false)\n  const [error, setError ] = useState('')\n  const [selectedFile, setSelectedFile] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [state, setState]  = useState({\n    username: '',\n    email: '',\n    password: '',\n    passwordConf: '',\n    bio: '',\n    isAdmin: props.admin ? true : false,\n    adminPw:\"\"\n  });\n\n  const history = useHistory()\n  \n  function handleChange(e){\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  async function handleSubmit(e){\n    // add this later\n    e.preventDefault();\n    setLoading(true);\n    if(props.admin && state.adminPw !== \"felco2\"){\n      setError(\"Wrong credentials\")\n      console.log(error)\n    } else{\n    // Photos have to be sent over as FormData\n    // They send over the form in multiparts (multipe requests to the server)\n\n      const formData = new FormData();\n      formData.append('photo', selectedFile);\n\n\n      // generating rest of form data by looping over the state object!\n      for (let key in state){\n        formData.append(key, state[key])\n      }\n      //fyi if you log out formData you won't see anything you have to use the folllowing\n\n      // Display the key/value pairs\n      // for (var pair of formData.entries()) {\n      //   console.log(pair[0]+ ', ' + pair[1]); \n      // }\n\n      // SO now we have are data prepared to send over in our formData object\n      try {\n        // refere to the utils/userService, to look at the signup fetch function\n        await userService.signup(formData);\n        // setTheUser in our app\n        props.handleSignUpOrLogin() // gets the token from localstorage and updates the user state in our app.js\n        // with the correct user object from the current token\n        // then route to the homepage\n        setLoading(false);\n        history.push('/') // defined above from react-router-dom\n        // after this we can go whereever\n\n      } catch(err){\n        console.log(err.message)\n        setError(err.message)\n      }\n    }\n  }\n\n  function handleFileInput(e){\n    setSelectedFile(e.target.files[0])\n  }\n \n    \n    return (\n      <>\n        {loading ?\n        <LoadingMsg />\n        :\n        <SignupForm \n          handleChange={handleChange} \n          handleSubmit={handleSubmit} \n          handleFileInput={handleFileInput}\n          state={state}\n          error={error}\n          invalidForm={invalidForm}\n        />\n        }\n        \n      </>\n      );   \n    \n}\n","/Users/Thom/code/hardy-plant-society/src/pages/LoginPage/LoginPage.jsx",["119"],"import React, { useState } from 'react';\nimport './LoginPage.css';\nimport { useHistory } from 'react-router-dom';\nimport userService from '../../utils/userService';\nimport LoginForm from '../../components/Forms/LoginForm/LoginForm'\n\nexport default function LoginPage(props){\n    const [invalidForm, setValidForm] = useState(false);\n    const [error, setError ]          = useState('')\n    const [state, setState]       = useState({\n        email: '',\n        password: '',\n    })\n  \n    const history = useHistory();\n    \n    function handleChange(e){\n      setState({\n        ...state,\n        [e.target.name]: e.target.value\n      })\n    }\n   \n    \n\n    async function handleSubmit(e){\n      e.preventDefault()\n              \n      try {\n          await userService.login(state);\n          // Route to wherever you want!\n          props.handleSignUpOrLogin() // \n          history.push('/')\n          \n        } catch (err) {\n          // Invalid user data (probably duplicate email)\n          setError(err.message)\n        }\n    }\n\n    return (\n        <>\n          <LoginForm handleSubmit={handleSubmit} handleChange={handleChange} state={state} error={error} invalidForm={invalidForm}/>\n        </>\n      );\n}\n\n","/Users/Thom/code/hardy-plant-society/src/utils/userService.js",["120"],"import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  console.log(user);\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Email already taken!');\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nexport default {\n  signup, \n  getUser,\n  logout,\n  login\n};","/Users/Thom/code/hardy-plant-society/src/hooks/useForm.js",[],["121","122"],"/Users/Thom/code/hardy-plant-society/src/components/ErrorMessage/ErrorMessage.jsx",[],"/Users/Thom/code/hardy-plant-society/src/utils/tokenService.js",["123"],"function setToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","/Users/Thom/code/hardy-plant-society/src/components/Forms/SignupForm/SignupForm.jsx",[],"/Users/Thom/code/hardy-plant-society/src/components/Forms/LoginForm/LoginForm.jsx",[],"/Users/Thom/code/hardy-plant-society/src/pages/AdminSignupPage/AdminSignupPage.jsx",["124"],"import React, { useState } from 'react'\nimport SignupPage from '../SignupPage/SignupPage'\n\nexport default function AdminSignupPage({handleSignUpOrLogin}){\n    const[admin, setAdmin] = useState(true)\n    return(\n        <SignupPage handleSignUpOrLogin={handleSignUpOrLogin} admin={admin}/>\n    )\n}","/Users/Thom/code/hardy-plant-society/src/components/LoadingMsg/LoadingMsg.jsx",["125"],"import React from 'react'\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\n\nconst Loading = () => (\n  <div>\n\n    <Segment>\n      <Dimmer active inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n\n      \n    </Segment>\n  </div>\n)\n\nexport default Loading","/Users/Thom/code/hardy-plant-society/src/utils/plantPostService.js",[],"/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantPostForm.jsx",["126","127","128","129","130","131","132"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Button, Form, Radio, Segment } from 'semantic-ui-react'\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nimport PlantSearchBar from './PlantSearchBar'\nimport PlantSearchResults from './PlantSearchResults'\nimport RadioComponent from './RadioComponent'\n\n\nexport default function PlantPostForm(props){\n\n // Trefle API variables\n const KEY = process.env.TREFLETOKEN\n const TREFLE_BASE_URL = `https://trefle.io/api/v1/species/search?token=nGl9aJhLyHSPDXgy_7THrf3UycmVNDpcU4kvluaWwZQ&q=`\n const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n    //---------------------------------------- state hooks --------------------------------------//\n   // Image to be uploaded to AWS \n  const [selectedFile, setSelectedFile] = useState('')\n  // Custom form data\n  const [state, setState] = useState({\n    forSale: false,\n    isSeed: false,\n    isRootstock: false,\n    dateCollected: new Date(),\n    quantity: 1,\n    description: \"\",\n    photoUrl: \"\",\n    plant: \"\",\n    cultivar: \"\"\n\n  })\n\n  // Plant Search Results state\n  const [selectState, setSelectState] = useState('');\n\n  // Radio Toggle State\n  const [radioToggle, setRadioToggle] = useState(true);\n\n  // Trefle API data\n  const [trefleData, setTrefleData] = useState(\"\");\n  const [searchTag, setSearchTag] = useState(\"\");\n  const [toggle, setToggle] = useState(true);\n  const [selectData, setSelectData] = useState([]);\n  const [selectedPlantData, setSelectedPlantData] = useState({})\n//---------------------------------------- useEffect --------------------------------------//\n  // Trefle Search API Call\n  useEffect(() => {\n    console.log(searchTag, \"useEffect searchTag\");\n    const trefleUrl = `${TREFLE_BASE_URL}${searchTag.replace(/\\s/g, '&')}`;\n    fetch(proxyurl + trefleUrl)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data.data, \"json data\");\n        setTrefleData(data.data);\n        \n      });\n  }, [searchTag]);\n  \n  // creates array for select menu from Trefle Data\n  useEffect(() => {\n    if(trefleData){\n        let mappedData = trefleData.map((result, index) => {\n            return ({\n                key: result.slug,\n                text: result.common_name ? result.common_name + \" / \" + result.scientific_name : result.scientific_name,\n                value: result.slug,\n                image: { avatar: true, src: result.image_url }\n            })\n        });\n        setSelectData(mappedData);\n        console.log(selectData, \"<----selectData from useEffect\")\n    }\n  }, [trefleData]);\n\n  useEffect(() => {\n    setState({\n        ...state,\n        plant: selectState\n    })\n  }, [selectState])\n\n\n  //---------------------------------------- functions- handlers / submit --------------------------------------//\n\n  // Trefle API submit handler\n  const handleTrefleSubmit = (e, tag) => {\n    e.preventDefault()\n    console.log(\"From App - making API Call - tag - >\", tag);\n    setSearchTag(tag);\n    setToggle(!toggle);\n  };\n\n    // Plant Search Results hanlder\n    function handleSelectChange(e, result){\n        setSelectState(result.value)\n        \n        console.log(result, \"dropdown Change\")\n        }\n\n  // Photo File\n  function handleFileInput(e){\n    setSelectedFile(e.target.files[0])\n  }\n\n  // update values for text fields\n  function handleChange(e){\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  // toggle between Seed and Plant submission\n  function handleToggle(e){\n      setState({\n          ...state,\n          isSeed: state.isSeed ? false : true,\n          isRootstock: state.isSeed ? false : true\n      })\n      setRadioToggle(!radioToggle);\n  }\n\n  // datepicker handler\n  function handleDate(event, data){\n    setState({\n        ...state,\n        dateCollected: data.value\n      })\n  }\n\n  function handleToggleChange(){\n      setState({\n          ...state,\n          forSale: !state.forSale\n      })\n  }\n  \n\n\n  //main form submit handler\n  function handleSubmit(e){\n\n\n\n    e.preventDefault()\n             \n    const formData = new FormData()\n    formData.append('photo', selectedFile)\n    formData.append('forSale', state.forSale)\n    formData.append('isSeed', state.isSeed)\n    formData.append('isRootstock', state.isRootstock)\n    formData.append('dateCollected', state.dateCollected)\n    formData.append('quantity', state.quantity)\n    formData.append('description', state.description)\n    formData.append('plant', state.plant)\n    formData.append('cultivar', state.cultivar)\n    props.handleAddPost(formData)\n    \n  }\n\n\n  return (\n    \n  \n        <Segment>\n        \n            <Form  autoComplete=\"off\" onSubmit={handleSubmit}>\n              <h3>What are you contributing?</h3>\n              <RadioComponent handleChange={handleToggle} toggle={radioToggle} />\n              \n              {state.isSeed ? \n              <p>Collected seeds, or a plant that has set seed and can be harvested</p>\n              :\n              <p>Mature plant with established roots or runners that can transplanted.</p>\n              }\n              \n              \n              <PlantSearchBar handleSubmit={handleTrefleSubmit} />\n              \n              <PlantSearchResults selectData={selectData} handleChange={handleSelectChange} selectState={selectState}/>\n\n              <Form.Input\n                  className=\"form-control\"\n                  name=\"cultivar\"\n                  value={state.cultivar}\n                  placeholder=\"Cultivar name if known or if it exists...\"\n                  onChange={handleChange}\n                  required\n              /> \n              <Form.Input\n                  className=\"form-control\"\n                  name=\"description\"\n                  value={state.description}\n                  placeholder={state.isSeed ? \"Describe your collection of seeds or plant that has set seed\" : \"Describe your rootstock or runners that are ready to be transplanted\"}\n                  onChange={handleChange}\n                  required\n              /> \n              <h3>How many {state.isSeed ? \"packets of seed\" : \"plants\"} do you have?</h3>\n              <Form.Input\n                className=\"form-control\"\n                name=\"quantity\"\n                value={state.quantity}\n                onChange={handleChange}\n                required\n              />\n              <h3>When was this collected?</h3>\n              <SemanticDatepicker value={state.dateCollected} onChange={handleDate} />\n\n              {props.user.isAdmin ? \n                <Form.Field>\n                    <Radio\n                        label='For Sale'\n                        name='forSale'\n                        value='forSale'\n                        checked={state.forSale}\n                        onClick={handleToggleChange}\n                    />\n                </Form.Field> \n              : \n              \"\"}\n              \n\n              <h3>Do you have a photo?</h3>\n              <Form.Input\n                className=\"form-control\"\n                type=\"file\"\n                name=\"photo\"\n                placeholder=\"upload image\"\n                onChange={handleFileInput}\n              />   \n              <Button\n                type=\"submit\"\n                className=\"btn\"\n              >\n                SUBMIT\n              </Button>\n            </Form>\n            \n          </Segment>\n     \n   \n  ); \n}","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantSearchBar.jsx",["133"],"import React, { useState } from \"react\";\nimport { Button, Form, Segment } from 'semantic-ui-react'\nimport './PlantPostForm.css';\n\nexport default function PlantSearchBar(props) {\n  const [searchTag, setSearchTag] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // remove spaces- use regex\n    props.handleSubmit(e, searchTag);\n    setSearchTag(\"\");\n  };\n\n  const handleChange = (e) => {\n    const tag = e.target.value;\n    setSearchTag(tag);\n  };\n\n  return (\n    <>\n        <Form.Input\n          id=\"tagInput\"\n          type=\"text\"\n          value={searchTag}\n          placeholder=\"Search common or scientific name\"\n          onChange={handleChange}\n        />\n        <div id=\"div\">\n        <Button  onClick={handleSubmit} value=\"Search\" id=\"right\">Search</Button>\n        </div>\n    </>\n  );\n}","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantSearchResults.jsx",["134"],"import React, {useState} from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\n\n\nexport default function DropdownExampleSelection(props){\n\n\n\n  return(\n    <Dropdown\n    value={props.selectState}\n    placeholder='Select Plant'\n    noResultsMessage='No Results'\n    fluid\n    selection\n    options={props.selectData}\n    onChange={props.handleChange}\n  />\n  )\n  \n} \n  \n\n","/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/PlantSearchBarV2.jsx",["135","136","137"],"import React, {useState, useEffect} from 'react'\nimport { Search, Grid, Header, Segment, Label, Image } from 'semantic-ui-react'\n\n\n\nconst initialState = {\n  loading: false,\n  results: [],\n  value: '',\n  searchTag: ''\n}\n\nfunction exampleReducer(state, action) {\n  switch (action.type) {\n    case 'CLEAN_QUERY':\n      return initialState\n    case 'START_SEARCH':\n      return { ...state, loading: true, value: action.query, searchTag: action.query }\n    case 'FINISH_SEARCH':\n      return { ...state, loading: false, results: action.results }\n    case 'UPDATE_SELECTION':\n      return { ...state, value: action.selection }\n\n    default:\n      throw new Error()\n  }\n}\n\nconst resultRenderer = ({ common_name, image_url }) => <><Label content={common_name} /><Image src={image_url}/></>\n\nfunction SearchExampleStandardCustom() {\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState)\n  const { loading, results, value, searchTag } = state\n\n  const timeoutRef = React.useRef()\n  const handleSearchChange = React.useCallback((e, data) => {\n    clearTimeout(timeoutRef.current)\n    dispatch({ type: 'START_SEARCH', query: data.value })\n\n    timeoutRef.current = setTimeout(() => {\n      if (data.value.length === 0) {\n        dispatch({ type: 'CLEAN_QUERY' })\n        return\n      }\n\n      dispatch({\n        type: 'FINISH_SEARCH',\n        results: trefleData,\n      })\n    }, 300)\n  }, [])\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current)\n    }\n  }, [])\n\n   // Trefle API variables\n   const KEY = process.env.TREFLETOKEN;\n   const TREFLE_BASE_URL = `https://trefle.io/api/v1/plants/search?token=nGl9aJhLyHSPDXgy_7THrf3UycmVNDpcU4kvluaWwZQ&q=`;\n \n   // Trefle API data\n   const [trefleData, setTrefleData] = useState(\"\");\n \n   // Trefle API Call\n   useEffect(() => {\n     const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n     console.log(searchTag, \"useEffect searchTag\");\n     const trefleUrl = `${TREFLE_BASE_URL}${searchTag}`;\n     fetch(proxyurl + trefleUrl)\n       .then((res) => res.json())\n       .then((data) => {\n         console.log(data.data, \"json data\");\n         setTrefleData(data.data);\n       });\n   }, [searchTag]);\n\n  return (\n    <Grid>\n      <Grid.Column width={6}>\n        <Search\n          loading={loading}\n          onResultSelect={(e, data) =>\n            dispatch({ type: 'UPDATE_SELECTION', selection: data.result.title })\n          }\n          onSearchChange={handleSearchChange}\n          resultRenderer={resultRenderer}\n          results={trefleData}\n          value={value}\n        />\n      </Grid.Column>\n\n      <Grid.Column width={10}>\n        <Segment>\n          <Header>State</Header>\n          <pre style={{ overflowX: 'auto' }}>\n            {JSON.stringify({ loading, results, value }, null, 2)}\n          </pre>\n          <Header>Options</Header>\n          <pre style={{ overflowX: 'auto' }}>\n            {JSON.stringify(trefleData, null, 2)}\n          </pre>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default SearchExampleStandardCustom",["138","139"],"/Users/Thom/code/hardy-plant-society/src/components/Forms/PlantPostForm/RadioComponent.jsx",["140"],"import React, { Component } from 'react'\nimport { Form, Radio } from 'semantic-ui-react'\n\nexport default function RadioComponent(props) {\n  \n\n    return (\n      <>\n        <Form.Field>\n          <Radio\n            label='Rootstock'\n            name='radioGroup'\n            value='isRootstock'\n            checked={props.toggle}\n            onChange={props.handleChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Radio\n            label='Seed'\n            name='radioGroup'\n            value='isSeed'\n            checked={!props.toggle}\n            onChange={props.handleChange}\n          />\n        </Form.Field>\n      </>\n    )\n  }\n","/Users/Thom/code/hardy-plant-society/src/pages/PlantFeedPage/PlantFeedPage.jsx",[],"/Users/Thom/code/hardy-plant-society/src/components/PlantFeed/PlantFeed.jsx",[],"/Users/Thom/code/hardy-plant-society/src/components/PlantCard/PlantCard.jsx",["141"],"import React from 'react';\nimport { Card, Icon, Image, Feed } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\nfunction PlantCard({post, isProfile, user, addLike, removeLike}) { \n\n\n\n\n\n\n  return (\n    <Card key={post._id}>\n     {isProfile ? ''\n        :  \n        <Link to={`/${user.username}`}>\n          <Card.Content textAlign='left'>\n              <Image\n                  floated='left'\n                  size='large'\n                  avatar\n                  src={post.user.photoUrl ? post.user.photoUrl : 'https://react.semantic-ui.com/images/wireframe/square-image.png'}\n              />\n              <Card.Header floated=\"right\">{post.user.username}</Card.Header>\n          </Card.Content>\n        </Link>\n      }\n      <Image src={`${post.photoUrl}`} wrapped ui={false} />\n      <Card.Content>\n      <Link to={`/plantswap/${post._id}`}>\n        <Card.Description>\n            {post.description}\n        </Card.Description>\n      </Link>\n      \n      </Card.Content>\n      <Card.Content extra textAlign={'right'}>\n        <Icon name={'heart'} size='large' />\n        \n          \n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default PlantCard;","/Users/Thom/code/hardy-plant-society/src/pages/PlantPostCreatePage/PlantPostCreatePage.jsx",["142"],"import React, { useState } from 'react';\nimport './PlantPostCreatePage.css';\nimport PlantPostForm from '../../components/Forms/PlantPostForm/PlantPostForm'\nimport LoadingMsg from '../../components/LoadingMsg/LoadingMsg'\n\nimport {  Grid } from 'semantic-ui-react'\n\n// create PlantPost service folder, add functions\n\nexport default function PlantPostPage(props){\n \n\n\n    return (\n        <>\n            <Grid centered >\n            <Grid.Row>\n            <Grid.Column>\n                Header\n            </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n            <Grid.Column style={{ maxWidth: 750 }}>\n                {props.loading ?\n                    <LoadingMsg />\n                    :\n                    \n                    <PlantPostForm handleAddPost={props.handleAddPost} user={props.user}/>\n                }\n            </Grid.Column>\n            </Grid.Row>\n        </Grid>\n            \n        </>\n    )\n}","/Users/Thom/code/hardy-plant-society/src/pages/PlantDetailPage/PlantDetailPage.jsx",["143","144","145"],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"154","line":8,"column":23,"nodeType":"152","messageId":"153","endLine":8,"endColumn":35},{"ruleId":"150","severity":1,"message":"154","line":8,"column":25,"nodeType":"152","messageId":"153","endLine":8,"endColumn":37},{"ruleId":"155","severity":1,"message":"156","line":44,"column":1,"nodeType":"157","endLine":49,"endColumn":3},{"ruleId":"146","replacedBy":"158"},{"ruleId":"148","replacedBy":"159"},{"ruleId":"155","severity":1,"message":"156","line":33,"column":3,"nodeType":"157","endLine":38,"endColumn":5},{"ruleId":"150","severity":1,"message":"160","line":5,"column":18,"nodeType":"152","messageId":"153","endLine":5,"endColumn":26},{"ruleId":"150","severity":1,"message":"161","line":2,"column":26,"nodeType":"152","messageId":"153","endLine":2,"endColumn":31},{"ruleId":"150","severity":1,"message":"162","line":1,"column":38,"nodeType":"152","messageId":"153","endLine":1,"endColumn":44},{"ruleId":"150","severity":1,"message":"163","line":13,"column":8,"nodeType":"152","messageId":"153","endLine":13,"endColumn":11},{"ruleId":"150","severity":1,"message":"164","line":45,"column":10,"nodeType":"152","messageId":"153","endLine":45,"endColumn":27},{"ruleId":"150","severity":1,"message":"165","line":45,"column":29,"nodeType":"152","messageId":"153","endLine":45,"endColumn":49},{"ruleId":"166","severity":1,"message":"167","line":58,"column":6,"nodeType":"168","endLine":58,"endColumn":17,"suggestions":"169"},{"ruleId":"166","severity":1,"message":"170","line":74,"column":6,"nodeType":"168","endLine":74,"endColumn":18,"suggestions":"171"},{"ruleId":"166","severity":1,"message":"172","line":81,"column":6,"nodeType":"168","endLine":81,"endColumn":19,"suggestions":"173"},{"ruleId":"150","severity":1,"message":"174","line":2,"column":24,"nodeType":"152","messageId":"153","endLine":2,"endColumn":31},{"ruleId":"150","severity":1,"message":"175","line":1,"column":16,"nodeType":"152","messageId":"153","endLine":1,"endColumn":24},{"ruleId":"166","severity":1,"message":"176","line":51,"column":6,"nodeType":"168","endLine":51,"endColumn":8,"suggestions":"177"},{"ruleId":"150","severity":1,"message":"163","line":59,"column":10,"nodeType":"152","messageId":"153","endLine":59,"endColumn":13},{"ruleId":"166","severity":1,"message":"167","line":76,"column":7,"nodeType":"168","endLine":76,"endColumn":18,"suggestions":"178"},{"ruleId":"146","replacedBy":"179"},{"ruleId":"148","replacedBy":"180"},{"ruleId":"150","severity":1,"message":"181","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"182","line":2,"column":29,"nodeType":"152","messageId":"153","endLine":2,"endColumn":33},{"ruleId":"150","severity":1,"message":"175","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"183","line":12,"column":12,"nodeType":"152","messageId":"153","endLine":12,"endColumn":16},{"ruleId":"150","severity":1,"message":"184","line":15,"column":12,"nodeType":"152","messageId":"153","endLine":15,"endColumn":17},{"ruleId":"166","severity":1,"message":"185","line":45,"column":8,"nodeType":"168","endLine":45,"endColumn":10,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setValidForm' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["187"],["188"],"'setAdmin' is assigned a value but never used.","'Image' is defined but never used.","'useRef' is defined but never used.","'KEY' is assigned a value but never used.","'selectedPlantData' is assigned a value but never used.","'setSelectedPlantData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'TREFLE_BASE_URL'. Either include it or remove the dependency array.","ArrayExpression",["189"],"React Hook useEffect has a missing dependency: 'selectData'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["191"],"'Segment' is defined but never used.","'useState' is defined but never used.","React Hook React.useCallback has a missing dependency: 'trefleData'. Either include it or remove the dependency array.",["192"],["193"],["187"],["188"],"'Component' is defined but never used.","'Feed' is defined but never used.","'post' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getShow'. Either include it or remove the dependency array.",["194"],"no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"195","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [TREFLE_BASE_URL, searchTag]",{"range":"206","text":"207"},"Update the dependencies array to be: [selectData, trefleData]",{"range":"208","text":"209"},"Update the dependencies array to be: [selectState, state]",{"range":"210","text":"211"},"Update the dependencies array to be: [trefleData]",{"range":"212","text":"213"},{"range":"214","text":"207"},"Update the dependencies array to be: [getShow]",{"range":"215","text":"216"},[2059,2070],"[TREFLE_BASE_URL, searchTag]",[2644,2656],"[selectData, trefleData]",[2752,2765],"[selectState, state]",[1399,1401],"[trefleData]",[2175,2186],[1218,1220],"[getShow]"]